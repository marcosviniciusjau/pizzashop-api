{"version":3,"sources":["../src/http/server.ts","../src/db/schema/index.ts","../src/db/schema/users.ts","../src/db/schema/orders.ts","../src/db/schema/order-items.ts","../src/db/schema/restaurants.ts","../src/db/schema/evaluations.ts","../src/db/schema/auth-links.ts","../src/db/schema/products.ts","../src/db/connection.ts","../src/env.ts","../src/http/routes/register-restaurant.ts","../src/http/routes/register-customer.ts","../src/http/routes/send-authentication-link.ts","../src/mail/client.ts","../src/mail/templates/authentication-magic-link.tsx","../src/http/routes/errors/unauthorized-error.ts","../src/http/routes/create-order.ts","../src/http/authentication.ts","../src/http/routes/errors/not-a-manager-error.ts","../src/lib/stripe.ts","../src/http/routes/approve-order.ts","../src/http/routes/cancel-order.ts","../src/http/routes/get-orders.ts","../src/http/routes/create-evaluation.ts","../src/http/routes/get-evaluations.ts","../src/http/routes/update-menu.ts","../src/http/routes/update-profile.ts","../src/http/routes/get-profile.ts","../src/http/routes/authenticate-from-link.ts","../src/http/routes/get-managed-restaurant.ts","../src/http/routes/sign-out.ts","../src/http/routes/get-order-details.ts","../src/http/routes/get-month-receipt.ts","../src/http/routes/get-month-orders-amount.ts","../src/http/routes/get-day-orders-amount.ts","../src/http/routes/get-month-canceled-orders-amount.ts","../src/http/routes/get-daily-receipt-in-period.ts","../src/http/routes/get-popular-products.ts","../src/http/routes/dispatch-order.ts","../src/http/routes/deliver-order.ts","../src/http/routes/get-products.ts","../src/http/routes/get-customers.ts"],"sourcesContent":["import { Elysia } from 'elysia'\r\nimport { cors } from '@elysiajs/cors'\r\n\r\nimport { registerRestaurant } from './routes/register-restaurant'\r\nimport { registerCustomer } from './routes/register-customer'\r\nimport { sendAuthenticationLink } from './routes/send-authentication-link'\r\nimport { createOrder } from './routes/create-order'\r\nimport { approveOrder } from './routes/approve-order'\r\nimport { cancelOrder } from './routes/cancel-order'\r\nimport { getOrders } from './routes/get-orders'\r\nimport { createEvaluation } from './routes/create-evaluation'\r\nimport { getEvaluations } from './routes/get-evaluations'\r\nimport { updateMenu } from './routes/update-menu'\r\nimport { updateProfile } from './routes/update-profile'\r\nimport { authentication } from './authentication'\r\nimport { getProfile } from './routes/get-profile'\r\nimport { authenticateFromLink } from './routes/authenticate-from-link'\r\nimport { getManagedRestaurant } from './routes/get-managed-restaurant'\r\nimport { signOut } from './routes/sign-out'\r\nimport { getOrderDetails } from './routes/get-order-details'\r\nimport { getMonthReceipt } from './routes/get-month-receipt'\r\nimport { getMonthOrdersAmount } from './routes/get-month-orders-amount'\r\nimport { getDayOrdersAmount } from './routes/get-day-orders-amount'\r\nimport { getMonthCanceledOrdersAmount } from './routes/get-month-canceled-orders-amount'\r\nimport { getDailyReceiptInPeriod } from './routes/get-daily-receipt-in-period'\r\nimport { getPopularProducts } from './routes/get-popular-products'\r\nimport { dispatchOrder } from './routes/dispatch-order'\r\nimport { deliverOrder } from './routes/deliver-order'\r\nimport { getProducts } from './routes/get-products'\r\nimport { getCustomers } from './routes/get-customers'\r\nconst app = new Elysia()\r\n  .use(\r\n    cors({\r\n      credentials: true,\r\n      allowedHeaders: ['content-type', 'authorization'],\r\n      methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS'],\r\n      origin: (request): boolean => {\r\n        const origin = 'http://localhost:3000'\r\n\r\n        if (!origin) {\r\n          return false\r\n        }\r\n\r\n        return true\r\n      },\r\n    }),\r\n  )\r\n  .use(authentication)\r\n  .use(signOut)\r\n  .use(getProfile)\r\n  .use(getManagedRestaurant)\r\n  .use(registerRestaurant)\r\n  .use(registerCustomer)\r\n  .use(sendAuthenticationLink)\r\n  .use(authenticateFromLink)\r\n  .use(createOrder)\r\n  .use(approveOrder)\r\n  .use(cancelOrder)\r\n  .use(dispatchOrder)\r\n  .use(deliverOrder)\r\n  .use(getOrders)\r\n  .use(getOrderDetails)\r\n  .use(createEvaluation)\r\n  .use(getEvaluations)\r\n  .use(updateMenu)\r\n  .use(updateProfile)\r\n  .use(getMonthReceipt)\r\n  .use(getMonthOrdersAmount)\r\n  .use(getDayOrdersAmount)\r\n  .use(getMonthCanceledOrdersAmount)\r\n  .use(getDailyReceiptInPeriod)\r\n  .use(getPopularProducts)\r\n  .use(getProducts)\r\n  .use(getCustomers)\r\n  .onError(({ code, error, set }) => {\r\n    switch (code) {\r\n      case 'VALIDATION': {\r\n        set.status = error.status\r\n\r\n        return error.toResponse()\r\n      }\r\n      case 'NOT_FOUND': {\r\n        return new Response(null, { status: 404 })\r\n      }\r\n      default: {\r\n        console.error(error)\r\n\r\n        return new Response(null, { status: 500 })\r\n      }\r\n    }\r\n  })\r\n\r\napp.listen(3333)\r\n\r\nconsole.log(\r\n  `🔥 HTTP server running at ${app.server?.hostname}:${app.server?.port}`,\r\n)\r\n","export * from './users'\r\nexport * from './restaurants'\r\nexport * from './evaluations'\r\nexport * from './orders'\r\nexport * from './auth-links'\r\nexport * from './products'\r\nexport * from './order-items'\r\n","import { relations } from 'drizzle-orm'\r\nimport { pgEnum, pgTable, text, timestamp } from 'drizzle-orm/pg-core'\r\nimport { orders } from './orders'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport const userRoleEnum = pgEnum('user_role', ['manager', 'customer'])\r\n\r\nexport const users = pgTable('users', {\r\n  id: text('id')\r\n      .$defaultFn(() => nanoid())\r\n    .primaryKey(),\r\n  name: text('name').notNull().unique(),\r\n  email: text('email').notNull().unique(),\r\n  phone: text('phone'),\r\n  role: userRoleEnum('role').default('customer').notNull(),\r\n  createdAt: timestamp('created_at').defaultNow(),\r\n  updatedAt: timestamp('updated_at').defaultNow(),\r\n})\r\n\r\nexport const usersRelations = relations(users, ({ many }) => ({\r\n  orders: many(orders),\r\n}))\r\n","import { integer, pgEnum, pgTable, text, timestamp } from 'drizzle-orm/pg-core'\r\nimport { relations } from 'drizzle-orm'\r\nimport { restaurants, users } from '.'\r\nimport { orderItems } from './order-items'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport const orderStatusEnum = pgEnum('order_status', [\r\n  'pending',\r\n  'canceled',\r\n  'processing',\r\n  'delivering',\r\n  'delivered',\r\n])\r\n\r\nexport const orders = pgTable('orders', {\r\n  id: text('id')\r\n    .$defaultFn(() => nanoid())\r\n    .primaryKey(),\r\n  customerEmail: text('customer_email')\r\n    .references(() => users.email, {\r\n      onDelete: 'set null',\r\n    })\r\n    .notNull(),\r\n  restaurantId: text('restaurant_id')\r\n    .references(() => restaurants.id, {\r\n      onDelete: 'set null',\r\n    })\r\n    .notNull(),\r\n  status: orderStatusEnum('status').default('pending').notNull(),\r\n  totalInCents: integer('total_in_cents').notNull(),\r\n  createdAt: timestamp('created_at').defaultNow(),\r\n})\r\n\r\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\r\n  customer: one(users, {\r\n    fields: [orders.customerEmail],\r\n    references: [users.email],\r\n  }),\r\n  restaurant: one(restaurants, {\r\n    fields: [orders.restaurantId],\r\n    references: [restaurants.id],\r\n  }),\r\n  orderItems: many(orderItems),\r\n}))\r\n","import { relations } from 'drizzle-orm'\r\nimport { integer, pgTable, text } from 'drizzle-orm/pg-core'\r\nimport { orders, products } from '.'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport const orderItems = pgTable('order_items', {\r\n  id: text('id')\r\n    .$defaultFn(() => nanoid())\r\n    .primaryKey(),\r\n  orderId: text('order_id')\r\n    .notNull()\r\n    .references(() => orders.id, {\r\n      onDelete: 'cascade',\r\n    }),\r\n  productId: text('product_id').references(() => products.id, {\r\n    onDelete: 'set null',\r\n  }),\r\n  quantity: integer('quantity').default(1),\r\n  priceInCents: integer('price_in_cents').notNull(),\r\n})\r\n\r\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\r\n  order: one(orders, {\r\n    fields: [orderItems.orderId],\r\n    references: [orders.id],\r\n  }),\r\n  product: one(products, {\r\n    fields: [orderItems.productId],\r\n    references: [products.id],\r\n  }),\r\n}))\r\n","import { pgTable, text, timestamp } from 'drizzle-orm/pg-core'\r\nimport { relations } from 'drizzle-orm'\r\nimport { users } from './users'\r\nimport { orders, products } from '.'\r\nimport { env } from '@/env'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport const restaurants = pgTable('restaurants', {\r\n  id: text('id')\r\n      .$defaultFn(() => nanoid())\r\n    .primaryKey(),\r\n  name: text('name').notNull(),\r\n  description: text('description'),\r\n  managerId: text('manager_id').references(() => users.id, {\r\n    onDelete: 'set null',\r\n  }),\r\n  createdAt: timestamp('created_at').defaultNow(),\r\n  updatedAt: timestamp('updated_at').defaultNow(),\r\n})\r\n\r\nexport const restaurantsRelations = relations(restaurants, ({ one, many }) => ({\r\n  manager: one(users, {\r\n    fields: [restaurants.managerId],\r\n    references: [users.id],\r\n    relationName: 'restaurantManager',\r\n  }),\r\n  orders: many(orders),\r\n  products: many(products),\r\n}))\r\n","import { relations } from 'drizzle-orm'\r\nimport { pgTable, integer, text, timestamp } from 'drizzle-orm/pg-core'\r\nimport { restaurants, users } from '.'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport const evaluations = pgTable('evaluations', {\r\n  id: text('id')\r\n    .$defaultFn(() => nanoid())\r\n    .primaryKey(),\r\n  customerName: text('customer_id').references(() => users.name),\r\n  restaurantId: text('restaurant_id').references(() => users.name),\r\n  rate: integer('rate').notNull(),\r\n  comment: text('comment'),\r\n  createdAt: timestamp('created_at').defaultNow(),\r\n})\r\n\r\nexport const evaluationsRelations = relations(evaluations, ({ one }) => ({\r\n  customer: one(users, {\r\n    fields: [evaluations.customerName],\r\n    references: [users.name],\r\n  }),\r\n  restaurant: one(restaurants, {\r\n    fields: [evaluations.restaurantId],\r\n    references: [restaurants.id],\r\n  }),\r\n}))\r\n","import { nanoid } from 'nanoid';\r\nimport { pgTable, text, timestamp } from 'drizzle-orm/pg-core'\r\nimport { users } from '.'\r\n\r\nexport const authLinks = pgTable('auth_links', {\r\n  id: text('id')\r\n    .$defaultFn(() => nanoid())\r\n    .primaryKey(),\r\n  code: text('code').notNull().unique(),\r\n  userId: text('user_id')\r\n    .references(() => users.id)\r\n    .notNull(),\r\n  createdAt: timestamp('created_at').defaultNow(),\r\n})\r\n","import { integer, pgEnum, pgTable, text, timestamp } from 'drizzle-orm/pg-core'\r\nimport { relations } from 'drizzle-orm'\r\nimport { restaurants } from '.'\r\nimport { orderItems } from './order-items'\r\nimport { nanoid } from 'nanoid'\r\nexport const categoriesEnum = pgEnum('categories', [\r\n  'pizzas',\r\n  'beverages',\r\n  'savory snacks',\r\n])\r\nexport const sizesEnum = pgEnum('sizes', [\r\n  'small',\r\n  'medium',\r\n  'big',\r\n])\r\n\r\nexport const products = pgTable('products', {\r\n  id: text('id')\r\n    .$defaultFn(() => nanoid())\r\n    .primaryKey(),\r\n  name: text('name').notNull(),\r\n  description: text('description'),\r\n  size: sizesEnum('size'),\r\n  category: categoriesEnum('category').default('pizzas').notNull(),\r\n  priceInCents: integer('price_in_cents').notNull(),\r\n  restaurantId: text('restaurant_id')\r\n    .references(() => restaurants.id, {\r\n      onDelete: 'cascade',\r\n    })\r\n    .notNull(),\r\n  createdAt: timestamp('created_at').defaultNow(),\r\n  updatedAt: timestamp('updated_at').defaultNow(),\r\n})\r\n\r\nexport const productsRelations = relations(products, ({ one, many }) => ({\r\n  restaurant: one(restaurants, {\r\n    fields: [products.restaurantId],\r\n    references: [restaurants.id],\r\n    relationName: 'productRestaurant',\r\n  }),\r\n  orderItems: many(orderItems),\r\n}))\r\n","import { drizzle } from 'drizzle-orm/postgres-js'\r\nimport postgres from 'postgres'\r\nimport { env } from '@/env'\r\nimport * as schema from './schema'\r\n\r\nconst client = postgres(env.DB_URL)\r\n\r\nexport const db = drizzle(client, { schema })\r\n","import { z } from 'zod'\r\n\r\nconst envSchema = z.object({\r\n  API_BASE_URL: z.string().url(),\r\n  AUTH_REDIRECT_URL: z.string().url(),\r\n  DB_URL: z.string().url().min(1),\r\n  EMAIL: z.string(),\r\n  RESTAURANT_EMAIL: z.string().email(),\r\n  JWT_SECRET_KEY: z.string().min(1),\r\n  RESEND_API_KEY: z.string().min(1),\r\n  STRIPE_SECRET_KEY: z.string().min(1),\r\n})\r\n\r\nexport const env = envSchema.parse(process.env)\r\n","import { restaurants, users } from '@/db/schema'\r\nimport { db } from '@/db/connection'\r\nimport Elysia, { t } from 'elysia'\r\n\r\nexport const registerRestaurant = new Elysia().post(\r\n  '/restaurants',\r\n  async ({ body, set }) => {\r\n    // @ts-ignore\r\n    const { restaurantName, managerName, email, phone } = body\r\n\r\n    const [manager] = await db\r\n      .insert(users)\r\n      .values({\r\n        name: managerName,\r\n        email,\r\n        phone,\r\n        role: 'manager',\r\n      })\r\n      .returning()\r\n\r\n    await db.insert(restaurants).values({\r\n      name: restaurantName,\r\n      managerId: manager.id,\r\n    })\r\n\r\n    set.status = 204\r\n  },\r\n  {\r\n    body: t.Object({\r\n      restaurantName: t.String(),\r\n      managerName: t.String(),\r\n      phone: t.String(),\r\n      email: t.String({ format: 'email' }),\r\n    }),\r\n  },\r\n)\r\n","import { users } from '@/db/schema'\r\nimport { db } from '@/db/connection'\r\nimport Elysia from 'elysia'\r\nimport { z } from 'zod'\r\n\r\nconst registerCustomerBodySchema = z.object({\r\n  name: z.string().min(1),\r\n  phone: z.string(),\r\n  email: z.string().email().optional(),\r\n})\r\n\r\nexport const registerCustomer = new Elysia().post(\r\n  '/customers',\r\n  async ({ body, set }) => {\r\n    const { name, phone, email } = registerCustomerBodySchema.parse(body)\r\n    // @ts-ignore\r\n    await db.insert(users).values({\r\n      name,\r\n      email,\r\n      phone,\r\n    })\r\n\r\n    set.status = 201\r\n  },\r\n)\r\n","import Elysia, { t } from 'elysia'\r\nimport { db } from '@/db/connection'\r\nimport { authLinks } from '@/db/schema'\r\nimport { resend } from '@/mail/client'\r\nimport { AuthenticationMagicLinkTemplate } from '@/mail/templates/authentication-magic-link'\r\nimport { env } from '@/env'\r\nimport { UnauthorizedError } from './errors/unauthorized-error'\r\nimport { nanoid } from 'nanoid'\r\nexport const sendAuthenticationLink = new Elysia().post(\r\n  '/authenticate',\r\n  async ({ body }) => {\r\n    // @ts-ignore\r\n    const { email } = body\r\n\r\n    const userFromEmail = await db.query.users.findFirst({\r\n      where(fields, { eq }) {\r\n        return eq(fields.email, email)\r\n      },\r\n    })\r\n\r\n    if (!userFromEmail) {\r\n      throw new UnauthorizedError()\r\n    }\r\n\r\n    const authLinkCode = nanoid()\r\n\r\n    await db.insert(authLinks).values({\r\n      userId: userFromEmail.id,\r\n      code: authLinkCode,\r\n    })\r\n\r\n    const authLink = new URL('/auth-links/authenticate', env.API_BASE_URL)\r\n    authLink.searchParams.set('code', authLinkCode)\r\n    authLink.searchParams.set('redirect', env.AUTH_REDIRECT_URL)\r\n\r\n    console.log(authLink.toString())\r\n\r\n    await resend.emails.send({\r\n      from: `Pizza Shop <naoresponda@${env.EMAIL}>`,\r\n      to: email,\r\n      subject: '[Pizza Shop] Link para login',\r\n      react: AuthenticationMagicLinkTemplate({\r\n        userEmail: email,\r\n        authLink: authLink.toString(),\r\n      }),\r\n    })\r\n  },\r\n  {\r\n    body: t.Object({\r\n      email: t.String({ format: 'email' }),\r\n    }),\r\n  },\r\n)\r\n","import { env } from '@/env'\r\nimport { Resend } from 'resend'\r\n\r\nexport const resend = new Resend(env.RESEND_API_KEY)\r\n","import {\r\n  Body,\r\n  Button,\r\n  Container,\r\n  Head,\r\n  Heading,\r\n  Hr,\r\n  Html,\r\n  Link,\r\n  Preview,\r\n  Section,\r\n  Tailwind,\r\n  Text,\r\n} from '@react-email/components'\r\n\r\ninterface AuthenticationMagicLinkTemplateProps {\r\n  userEmail: string\r\n  authLink: string\r\n}\r\n\r\nexport function AuthenticationMagicLinkTemplate({\r\n  userEmail,\r\n  authLink,\r\n}: AuthenticationMagicLinkTemplateProps) {\r\n  const previewText = `Faça login na Pizza Shop`\r\n\r\n  return (\r\n    <Html>\r\n      <Head />\r\n      <Preview>{previewText}</Preview>\r\n      <Tailwind>\r\n        <Body className=\"bg-white my-auto mx-auto font-sans\">\r\n          <Container className=\"border border-solid border-[#eaeaea] rounded my-[40px] mx-auto p-[20px] w-[465px]\">\r\n            <Section className=\"mt-[32px] text-center\">\r\n              <span className=\"text-2xl\">🍕</span>\r\n            </Section>\r\n            <Heading className=\"text-black text-[24px] font-normal text-center p-0 my-[30px] mx-0\">\r\n              Faça login na Pizza Shop\r\n            </Heading>\r\n            <Text className=\"text-black text-[14px] leading-[24px]\">\r\n              Você solicitou um link para login na Pizza Shop através do email{' '}\r\n              {userEmail}.\r\n            </Text>\r\n            <Section className=\"text-center mt-[32px] mb-[32px]\">\r\n              <Button\r\n                className=\"bg-sky-500 rounded text-white px-5 py-3 text-[12px] font-semibold no-underline text-center\"\r\n                href={authLink}\r\n              >\r\n                Entrar agora\r\n              </Button>\r\n            </Section>\r\n            <Text className=\"text-black text-[14px] leading-[24px]\">\r\n              ou copie a URL abaixo e cole em seu browser:{' '}\r\n              <Link href={authLink} className=\"text-sky-500 no-underline\">\r\n                {authLink}\r\n              </Link>\r\n            </Text>\r\n            <Hr className=\"border border-solid border-[#eaeaea] my-[26px] mx-0 w-full\" />\r\n            <Text className=\"text-[#666666] text-[12px] leading-[24px]\">\r\n              Se você não solicitou esse link de autenticação, apenas descarte\r\n              esse e-mail.\r\n            </Text>\r\n          </Container>\r\n        </Body>\r\n      </Tailwind>\r\n    </Html>\r\n  )\r\n}\r\n","export class UnauthorizedError extends Error {\r\n  constructor() {\r\n    super('Unauthorized.')\r\n  }\r\n}\r\n","import { db } from '@/db/connection'\r\nimport { orders } from '@/db/schema'\r\nimport Elysia, { t } from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { orderItems } from '@/db/schema/order-items'\r\nimport { users } from '@/db/schema/users'\r\nimport { products as productsSchema } from '@/db/schema';\r\nimport { stripe } from \"@/lib/stripe\";\r\nexport const createOrder = new Elysia().use(authentication).post(\r\n  '/restaurants/:restaurantId/orders',\r\n  async ({ params, body, set }) => {\r\n    const { restaurantId } = params\r\n    // @ts-ignore\r\n    let { customerName, customerEmail, items } = body\r\n\r\n    if (!items || !Array.isArray(items) || items.length === 0) {\r\n      set.status = 400\r\n      return { error: 'Itens do pedido são obrigatórios.' }\r\n    }\r\n    const productIds = items.map((item) => item.productId)\r\n\r\n    // Fetch products belonging to the specified restaurant\r\n    const products = await db.query.products.findMany({\r\n      where(fields, { eq, and, inArray }) {\r\n        return and(\r\n          eq(fields.restaurantId, restaurantId),\r\n          inArray(fields.id, productIds),\r\n        )\r\n      },\r\n    })\r\n\r\n    // Map order items to include details such as price and subtotal\r\n    const orderProducts = items.map((item) => {\r\n      const productOnDb = products.find((product) => product.id === item.productId)\r\n\r\n      const productOnStripe = stripe.products.retrieve(item.productId)\r\n      if (!productOnDb) {\r\n        if (!productOnStripe) {\r\n          throw new Error('Some products are not available in this restaurant.')\r\n        }\r\n        db.insert(productsSchema).values({\r\n          // @ts-ignore\r\n          id: item.productId,\r\n          name: item.name,\r\n          category: item.category,\r\n          size: item.size,\r\n          priceInCents: item.price,\r\n          restaurantId\r\n        })\r\n      }\r\n\r\n      return {\r\n        productId: item.productId,\r\n        unitPriceInCents: productOnDb!.priceInCents,\r\n        quantity: item.quantity,\r\n        category: productOnDb!.category,\r\n        subtotalInCents: item.quantity * productOnDb!.priceInCents,\r\n      }\r\n    })\r\n    console.log(\"ta me irritando\", orderProducts)\r\n    const totalInCents = orderProducts.reduce((total, orderItem) => {\r\n      return total + orderItem.subtotalInCents\r\n    }, 0)\r\n\r\n    const customerExists = await db.query.users.findFirst({\r\n      where: (users, { eq }) => eq(users.email, customerEmail),\r\n    })\r\n\r\n    if (!customerExists) {\r\n      const [newCustomer] = await db\r\n        .insert(users)\r\n        .values({\r\n          name: customerName,\r\n          email: customerEmail\r\n        })\r\n        .returning({ email: users.email })\r\n\r\n      customerEmail = newCustomer.email!\r\n    }\r\n\r\n    try {\r\n      await db.transaction(async (tx) => {\r\n        try {\r\n          const [order] = await tx\r\n            .insert(orders)\r\n            .values({\r\n              totalInCents,\r\n              customerEmail,\r\n              restaurantId,\r\n            })\r\n            .returning({\r\n              id: orders.id,\r\n            })\r\n\r\n          await tx.insert(orderItems).values(\r\n            orderProducts.map((orderProduct) => ({\r\n              orderId: order.id,\r\n              productId: orderProduct.productId,\r\n              priceInCents: orderProduct.unitPriceInCents,\r\n              quantity: orderProduct.quantity,\r\n            })),\r\n          )\r\n        } catch (transactionError) {\r\n          console.error('Transaction error:', transactionError)\r\n          throw new Error('Failed to complete transaction.')\r\n        }\r\n      })\r\n\r\n      set.status = 201\r\n      return { message: 'Pedido criado com sucesso' }\r\n    } catch (error) {\r\n      console.error('Order creation error:', error)\r\n      set.status = 500\r\n      return { error: 'Erro ao criar pedido' }\r\n    }\r\n  },\r\n  {\r\n    body: t.Object({\r\n      customerName: t.String(),\r\n      customerEmail: t.String(),\r\n      items: t.Array(\r\n        t.Object({\r\n          productId: t.String(),\r\n          name: t.String(),\r\n          price: t.Number({ minimum: 1 }),\r\n          quantity: t.Integer(),\r\n          category: t.String(),\r\n          size: t.String()\r\n        }),\r\n      ),\r\n    }),\r\n    params: t.Object({\r\n      restaurantId: t.String(),\r\n    }),\r\n  },\r\n)\r\n","import Elysia, { Static, t } from 'elysia'\r\nimport cookie from '@elysiajs/cookie'\r\nimport jwt from '@elysiajs/jwt'\r\nimport { env } from '@/env'\r\nimport { UnauthorizedError } from './routes/errors/unauthorized-error'\r\nimport { NotAManagerError } from './routes/errors/not-a-manager-error'\r\n\r\nconst jwtPayloadSchema = t.Object({\r\n  sub: t.String(),\r\n  restaurantId: t.Optional(t.String()),\r\n})\r\n\r\nexport const authentication = new Elysia()\r\n  .error({\r\n    UNAUTHORIZED: UnauthorizedError,\r\n    NOT_A_MANAGER: NotAManagerError,\r\n  })\r\n  .onError(({ code, error, set }) => {\r\n    switch (code) {\r\n      case 'UNAUTHORIZED':\r\n        set.status = 401\r\n        return { code, message: error.message }\r\n      case 'NOT_A_MANAGER':\r\n        set.status = 401\r\n        return { code, message: error.message }\r\n    }\r\n  })\r\n  .use(\r\n    jwt({\r\n      name: 'jwt',\r\n      secret: env.JWT_SECRET_KEY,\r\n      schema: jwtPayloadSchema,\r\n    }),\r\n  )\r\n  .use(cookie())\r\n    // @ts-ignore\r\n  .derive(({ jwt, cookie, setCookie, removeCookie }) => {\r\n    return {\r\n      getCurrentUser: async () => {\r\n          // @ts-ignore\r\n        const payload = await jwt.verify(cookie.auth)\r\n\r\n        if (!payload) {\r\n          throw new UnauthorizedError()\r\n        }\r\n\r\n        return payload\r\n      },\r\n      signUser: async (payload: Static<typeof jwtPayloadSchema>) => {\r\n        setCookie('auth', await jwt.sign(payload), {\r\n          httpOnly: true,\r\n          maxAge: 7 * 86400,\r\n          path: '/',\r\n        })\r\n      },\r\n      signOut: () => {\r\n        removeCookie('auth')\r\n      },\r\n    }\r\n  })\r\n  .derive(({ getCurrentUser }) => {\r\n    return {\r\n      getManagedRestaurantId: async () => {\r\n        const { restaurantId } = await getCurrentUser()\r\n\r\n        if (!restaurantId) {\r\n          throw new NotAManagerError()\r\n        }\r\n\r\n        return restaurantId\r\n      },\r\n    }\r\n  })","export class NotAManagerError extends Error {\r\n  constructor() {\r\n    super('User is not a restaurant manager.')\r\n  }\r\n}\r\n","import { env } from \"@/env\";\r\nimport Stripe from \"stripe\";\r\n\r\nconst stripeSecretKey = env.STRIPE_SECRET_KEY\r\nexport const stripe = new Stripe(stripeSecretKey, {\r\n  apiVersion: \"2025-02-24.acacia\",\r\n  appInfo: {\r\n    name: 'Pizza Shop',\r\n  }\r\n})","import Elysia, { t } from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { db } from '@/db/connection'\r\nimport { orders } from '@/db/schema'\r\nimport { eq } from 'drizzle-orm'\r\nimport { UnauthorizedError } from './errors/unauthorized-error'\r\n\r\nexport const approveOrder = new Elysia().use(authentication).patch(\r\n  '/orders/:id/approve',\r\n    // @ts-ignore\r\n  async ({ getManagedRestaurantId, set, params }) => {\r\n    const { id: orderId } = params\r\n    const restaurantId = await getManagedRestaurantId()\r\n\r\n    const order = await db.query.orders.findFirst({\r\n      where(fields, { eq, and }) {\r\n        return and(\r\n          eq(fields.id, orderId),\r\n          eq(fields.restaurantId, restaurantId),\r\n        )\r\n      },\r\n    })\r\n\r\n    if (!order) {\r\n      throw new UnauthorizedError()\r\n    }\r\n\r\n    if (order.status !== 'pending') {\r\n      set.status = 400\r\n\r\n      return { message: 'Order was already approved before.' }\r\n    }\r\n\r\n    await db\r\n      .update(orders)\r\n      .set({\r\n        status: 'processing',\r\n      })\r\n      .where(eq(orders.id, orderId))\r\n\r\n    set.status = 204\r\n  },\r\n  {\r\n    params: t.Object({\r\n      id: t.String(),\r\n    }),\r\n  },\r\n)\r\n","import Elysia, { t } from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { db } from '@/db/connection'\r\nimport { orders } from '@/db/schema'\r\nimport { eq } from 'drizzle-orm'\r\n\r\nexport const cancelOrder = new Elysia().use(authentication).patch(\r\n  '/orders/:id/cancel',\r\n  // @ts-ignore\r\n  async ({ getCurrentUser, set, params }) => {\r\n    const { id: orderId } = params\r\n    const { restaurantId } = await getCurrentUser()\r\n\r\n    if (!restaurantId) {\r\n      set.status = 401\r\n\r\n      throw new Error('User is not a restaurant manager.')\r\n    }\r\n\r\n    const order = await db.query.orders.findFirst({\r\n      where(fields, { eq, and }) {\r\n        return and(\r\n          eq(fields.id, orderId),\r\n          eq(fields.restaurantId, restaurantId),\r\n        )\r\n      },\r\n    })\r\n\r\n    if (!order) {\r\n      set.status = 401\r\n\r\n      throw new Error('Order not found under the user managed restaurant.')\r\n    }\r\n\r\n    if (!['pending', 'processing'].includes(order.status)) {\r\n      set.status = 400\r\n\r\n      return {\r\n        code: 'STATUS_NOT_VALID',\r\n        message: 'O pedido não pode ser cancelado depois de ser enviado.',\r\n      }\r\n    }\r\n\r\n    await db\r\n      .update(orders)\r\n      .set({\r\n        status: 'canceled',\r\n      })\r\n      .where(eq(orders.id, orderId))\r\n\r\n    set.status = 204\r\n  },\r\n  {\r\n    params: t.Object({\r\n      id: t.String(),\r\n    }),\r\n  },\r\n)\r\n","import Elysia, { t } from 'elysia'\r\nimport { orders, users } from '@/db/schema'\r\nimport { db } from '@/db/connection'\r\nimport { eq, and, ilike, desc, count, sql } from 'drizzle-orm'\r\nimport { createSelectSchema } from 'drizzle-typebox'\r\nimport { authentication } from '../authentication'\r\n\r\nexport const getOrders = new Elysia().use(authentication).get(\r\n  '/orders',\r\n  // @ts-ignore\r\n  async ({ query, getCurrentUser, set }) => {\r\n    const { pageIndex, orderId, customerName, status } = query\r\n    const { restaurantId } = await getCurrentUser()\r\n\r\n    if (!restaurantId) {\r\n      set.status = 401\r\n\r\n      throw new Error('User is not a restaurant manager.')\r\n    }\r\n\r\n    const baseQuery = db\r\n      .select({\r\n        orderId: orders.id,\r\n        createdAt: orders.createdAt,\r\n        status: orders.status,\r\n        customerName: users.name,\r\n        total: orders.totalInCents,\r\n      })\r\n      .from(orders)\r\n      // @ts-ignore\r\n      .innerJoin(users, eq(users.name, orders.customerName))\r\n      .where(\r\n        and(\r\n          eq(orders.restaurantId, restaurantId),\r\n          orderId ? ilike(orders.id, `%${orderId}%`) : undefined,\r\n          // @ts-ignore\r\n          status ? eq(orders.status, status) : undefined,\r\n          customerName ? ilike(users.name, `%${customerName}%`) : undefined,\r\n        ),\r\n      )\r\n\r\n    const [ordersCount] = await db\r\n      .select({ count: count() })\r\n      .from(baseQuery.as('baseQuery'))\r\n\r\n    const allOrders = await baseQuery\r\n      // @ts-ignore\r\n      .offset(pageIndex * 10)\r\n      .limit(10)\r\n      .orderBy((fields) => {\r\n        return [\r\n          sql`CASE ${fields.status} \r\n            WHEN 'pending' THEN 1\r\n            WHEN 'processing' THEN 2\r\n            WHEN 'delivering' THEN 3\r\n            WHEN 'delivered' THEN 4\r\n            WHEN 'canceled' THEN 99\r\n          END`,\r\n          desc(fields.createdAt),\r\n        ]\r\n      })\r\n\r\n    const result = {\r\n      orders: allOrders,\r\n      meta: {\r\n        pageIndex,\r\n        perPage: 10,\r\n        totalCount: ordersCount.count,\r\n      },\r\n    }\r\n\r\n    return result\r\n  },\r\n  {\r\n    query: t.Object({\r\n      customerName: t.Optional(t.String()),\r\n      orderId: t.Optional(t.String()),\r\n      status: t.Optional(createSelectSchema(orders).properties.status),\r\n      pageIndex: t.Numeric({ minimum: 0 }),\r\n    }),\r\n  },\r\n)\r\n","import Elysia, { t } from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { db } from '@/db/connection'\r\nimport { evaluations } from '@/db/schema'\r\n\r\nexport const createEvaluation = new Elysia().use(authentication).post(\r\n  '/evaluations',\r\n  // @ts-ignore\r\n  async ({ body, getCurrentUser, set }) => {\r\n    const { sub: userId } = await getCurrentUser()\r\n    // @ts-ignore\r\n    const { restaurantId, rate, comment } = body\r\n\r\n    await db.insert(evaluations).values({\r\n      restaurantId,\r\n      customerName: userId,\r\n      rate,\r\n      comment,\r\n    })\r\n\r\n    set.status = 201\r\n  },\r\n  {\r\n    body: t.Object({\r\n      restaurantId: t.String(),\r\n      rate: t.Integer({ minimum: 1, maximum: 5 }),\r\n      comment: t.Optional(t.String()),\r\n    }),\r\n  },\r\n)\r\n","import { db } from '@/db/connection'\r\nimport Elysia, { t } from 'elysia'\r\nimport { z } from 'zod'\r\nimport { authentication } from '../authentication'\r\n\r\nexport const getEvaluations = new Elysia().use(authentication).get(\r\n  '/evaluations',\r\n  // @ts-ignore\r\n  async ({ query, set, getCurrentUser }) => {\r\n    const { restaurantId } = await getCurrentUser()\r\n\r\n    if (!restaurantId) {\r\n      set.status = 401\r\n\r\n      throw new Error('User is not a restaurant manager.')\r\n    }\r\n\r\n    const { pageIndex } = z\r\n      .object({\r\n        pageIndex: z.coerce.number().default(0),\r\n      })\r\n      .parse(query)\r\n\r\n    const evaluations = await db.query.evaluations.findMany({\r\n      offset: pageIndex * 10,\r\n      limit: 10,\r\n      orderBy: (evaluations, { desc }) => desc(evaluations.createdAt),\r\n    })\r\n\r\n    return evaluations\r\n  },\r\n  {\r\n    query: t.Object({\r\n      pageIndex: t.Numeric({ minimum: 0 }),\r\n    }),\r\n  },\r\n)\r\n","import Elysia, { Static, t } from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { db } from '@/db/connection'\r\nimport { products } from '@/db/schema'\r\nimport { and, eq, inArray } from 'drizzle-orm'\r\n\r\nconst productSchema = t.Object({\r\n  id: t.Optional(t.String()),\r\n  name: t.String(),\r\n  description: t.Optional(t.String()),\r\n  price: t.Number({ minimum: 0 }),\r\n})\r\n\r\nexport const updateMenu = new Elysia().use(authentication).put(\r\n  '/menu',\r\n  // @ts-ignore\r\n  async ({ getManagedRestaurantId, set, body }) => {\r\n    const restaurantId = await getManagedRestaurantId()\r\n\r\n    const {\r\n      // @ts-ignore\r\n      products: { deletedProductIds, newOrUpdatedProducts },\r\n    } = body\r\n\r\n    if (deletedProductIds.length > 0) {\r\n      await db\r\n        .delete(products)\r\n        .where(\r\n          and(\r\n            inArray(products.id, deletedProductIds),\r\n            eq(products.restaurantId, restaurantId),\r\n          ),\r\n        )\r\n    }\r\n\r\n    type Product = Static<typeof productSchema>\r\n    type ProductWithId = Required<Product>\r\n    type ProductWithoutId = Omit<Product, 'id'>\r\n\r\n    const updatedProducts = newOrUpdatedProducts.filter(\r\n      (product): product is ProductWithId => {\r\n        return !!product.id\r\n      },\r\n    )\r\n\r\n    if (updatedProducts.length > 0) {\r\n      await Promise.all(\r\n        updatedProducts.map((product) => {\r\n          return db\r\n            .update(products)\r\n            .set({\r\n              name: product.name,\r\n              description: product.description,\r\n              priceInCents: product.price * 100,\r\n            })\r\n            .where(\r\n              and(\r\n                eq(products.id, product.id),\r\n                eq(products.restaurantId, restaurantId),\r\n              ),\r\n            )\r\n        }),\r\n      )\r\n    }\r\n\r\n    const newProducts = newOrUpdatedProducts.filter(\r\n      (product): product is ProductWithoutId => {\r\n        return !product.id\r\n      },\r\n    )\r\n\r\n    if (newProducts.length) {\r\n      await db.insert(products).values(\r\n        newProducts.map((product) => {\r\n          return {\r\n            name: product.name,\r\n            description: product.description,\r\n            priceInCents: product.price * 100,\r\n            restaurantId,\r\n          }\r\n        }),\r\n      )\r\n    }\r\n\r\n    set.status = 204\r\n  },\r\n  {\r\n    body: t.Object({\r\n      products: t.Object({\r\n        newOrUpdatedProducts: t.Array(productSchema),\r\n        deletedProductIds: t.Array(t.String()),\r\n      }),\r\n    }),\r\n  },\r\n)\r\n","import Elysia, { t } from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { db } from '@/db/connection'\r\nimport { restaurants } from '@/db/schema'\r\nimport { eq } from 'drizzle-orm'\r\n\r\nexport const updateProfile = new Elysia().use(authentication).put(\r\n  '/profile',\r\n  // @ts-ignore\r\n  async ({ getManagedRestaurantId, set, body }) => {\r\n    const restaurantId = await getManagedRestaurantId()\r\n    // @ts-ignore\r\n    const { name, description } = body\r\n\r\n    await db\r\n      .update(restaurants)\r\n      .set({\r\n        name,\r\n        description,\r\n      })\r\n      .where(eq(restaurants.id, restaurantId))\r\n\r\n    set.status = 204\r\n  },\r\n  {\r\n    body: t.Object({\r\n      name: t.String(),\r\n      description: t.Optional(t.String()),\r\n    }),\r\n  },\r\n)","import Elysia from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { db } from '@/db/connection'\r\n\r\nexport const getProfile = new Elysia()\r\n  .use(authentication)\r\n  // @ts-ignore\r\n  .get('/me', async ({ getCurrentUser }) => {\r\n    const { sub: userId } = await getCurrentUser()\r\n\r\n    const user = await db.query.users.findFirst({\r\n      where(fields, { eq }) {\r\n        return eq(fields.id, userId)\r\n      },\r\n    })\r\n\r\n    if (!user) {\r\n      throw new Error('User not found.')\r\n    }\r\n\r\n    return user\r\n  })\r\n","import Elysia, { t } from 'elysia'\r\nimport dayjs from 'dayjs'\r\nimport { authentication } from '../authentication'\r\nimport { db } from '@/db/connection'\r\nimport { authLinks } from '@/db/schema'\r\nimport { eq } from 'drizzle-orm'\r\nimport { UnauthorizedError } from './errors/unauthorized-error'\r\n\r\nexport const authenticateFromLink = new Elysia().use(authentication).get(\r\n  '/auth-links/authenticate',\r\n  // @ts-ignore\r\n  async ({ signUser, query, set }) => {\r\n    const { code, redirect } = query\r\n\r\n    const authLinkFromCode = await db.query.authLinks.findFirst({\r\n      where(fields, { eq }) {\r\n        return eq(fields.code, code)\r\n      },\r\n    })\r\n\r\n    if (!authLinkFromCode) {\r\n      throw new UnauthorizedError()\r\n    }\r\n\r\n    if (dayjs().diff(authLinkFromCode.createdAt, 'days') > 7) {\r\n      throw new UnauthorizedError()\r\n    }\r\n\r\n    const managedRestaurant = await db.query.restaurants.findFirst({\r\n      where(fields, { eq }) {\r\n        return eq(fields.managerId, authLinkFromCode.userId)\r\n      },\r\n    })\r\n\r\n    await signUser({\r\n      sub: authLinkFromCode.userId,\r\n      restaurantId: managedRestaurant?.id,\r\n    })\r\n\r\n    await db.delete(authLinks).where(eq(authLinks.code, code))\r\n\r\n    set.redirect = redirect\r\n  },\r\n  {\r\n    query: t.Object({\r\n      code: t.String(),\r\n      redirect: t.String(),\r\n    }),\r\n  },\r\n)\r\n","import Elysia from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { db } from '@/db/connection'\r\n\r\nexport const getManagedRestaurant = new Elysia()\r\n  .use(authentication)\r\n  // @ts-ignore\r\n  .get('/managed-restaurant', async ({ getManagedRestaurantId }) => {\r\n    const restaurantId = await getManagedRestaurantId()\r\n\r\n    const restaurant = await db.query.restaurants.findFirst({\r\n      where(fields, { eq }) {\r\n        return eq(fields.id, restaurantId)\r\n      },\r\n    })\r\n\r\n    if (!restaurant) {\r\n      throw new Error('Restaurant not found.')\r\n    }\r\n\r\n    return restaurant\r\n  })\r\n","import Elysia from 'elysia'\r\nimport { authentication } from '../authentication'\r\n\r\nexport const signOut = new Elysia()\r\n  .use(authentication)\r\n  // @ts-ignore\r\n  .post('/sign-out', async ({ signOut }) => {\r\n    signOut()\r\n  })\r\n","import Elysia, { t } from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { db } from '@/db/connection'\r\nimport { UnauthorizedError } from './errors/unauthorized-error'\r\nimport { NotAManagerError } from './errors/not-a-manager-error'\r\n\r\nexport const getOrderDetails = new Elysia().use(authentication).get(\r\n  '/orders/:id',\r\n  // @ts-ignore\r\n  async ({ getCurrentUser, params }) => {\r\n    const { id: orderId } = params\r\n    const { restaurantId } = await getCurrentUser()\r\n\r\n    if (!restaurantId) {\r\n      throw new NotAManagerError()\r\n    }\r\n\r\n    const order = await db.query.orders.findFirst({\r\n      columns: {\r\n        id: true,\r\n        createdAt: true,\r\n        status: true,\r\n        totalInCents: true,\r\n      },\r\n      with: {\r\n        customer: {\r\n          columns: {\r\n            name: true,\r\n            phone: true,\r\n            email: true,\r\n          },\r\n        },\r\n        orderItems: {\r\n          columns: {\r\n            id: true,\r\n            priceInCents: true,\r\n            quantity: true,\r\n          },\r\n          with: {\r\n            product: {\r\n              columns: {\r\n                name: true,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      where(fields, { eq, and }) {\r\n        return and(\r\n          eq(fields.id, orderId),\r\n          eq(fields.restaurantId, restaurantId),\r\n        )\r\n      },\r\n    })\r\n\r\n    if (!order) {\r\n      throw new UnauthorizedError()\r\n    }\r\n\r\n    return order\r\n  },\r\n  {\r\n    params: t.Object({\r\n      id: t.String(),\r\n    }),\r\n  },\r\n)\r\n","import Elysia from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { and, eq, gte, sql, sum } from 'drizzle-orm'\r\nimport dayjs from 'dayjs'\r\nimport { db } from '@/db/connection'\r\nimport { orders } from '@/db/schema'\r\n\r\nexport const getMonthReceipt = new Elysia()\r\n  .use(authentication)\r\n  // @ts-ignore\r\n  .get('/metrics/month-receipt', async ({ getManagedRestaurantId }) => {\r\n    const restaurantId = await getManagedRestaurantId()\r\n\r\n    const today = dayjs()\r\n    const lastMonth = today.subtract(1, 'month')\r\n    const startOfLastMonth = lastMonth.startOf('month')\r\n\r\n    /**\r\n     * January is ZERO, that's why we need to sum 1 to get the actual month\r\n     */\r\n    const lastMonthWithYear = lastMonth.format('YYYY-MM')\r\n    const currentMonthWithYear = today.format('YYYY-MM')\r\n\r\n    const monthsReceipts = await db\r\n      .select({\r\n        monthWithYear: sql<string>`TO_CHAR(${orders.createdAt}, 'YYYY-MM')`,\r\n        receipt: sum(orders.totalInCents).mapWith(Number),\r\n      })\r\n      .from(orders)\r\n      .where(\r\n        and(\r\n          eq(orders.restaurantId, restaurantId),\r\n          gte(orders.createdAt, startOfLastMonth.toDate()),\r\n        ),\r\n      )\r\n      .groupBy(sql`TO_CHAR(${orders.createdAt}, 'YYYY-MM')`)\r\n      .having(({ receipt }) => gte(receipt, 1))\r\n\r\n    const currentMonthReceipt = monthsReceipts.find((monthReceipt) => {\r\n      return monthReceipt.monthWithYear === currentMonthWithYear\r\n    })\r\n\r\n    const lastMonthReceipt = monthsReceipts.find((monthReceipt) => {\r\n      return monthReceipt.monthWithYear === lastMonthWithYear\r\n    })\r\n\r\n    const diffFromLastMonth =\r\n      lastMonthReceipt && currentMonthReceipt\r\n        ? (currentMonthReceipt.receipt * 100) / lastMonthReceipt.receipt\r\n        : null\r\n\r\n    return {\r\n      receipt: currentMonthReceipt?.receipt ?? 0,\r\n      diffFromLastMonth: diffFromLastMonth\r\n        ? Number((diffFromLastMonth - 100).toFixed(2))\r\n        : 0,\r\n    }\r\n  })\r\n","import Elysia from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { and, count, eq, gte, sql } from 'drizzle-orm'\r\nimport dayjs from 'dayjs'\r\nimport { db } from '@/db/connection'\r\nimport { orders } from '@/db/schema'\r\n\r\nexport const getMonthOrdersAmount = new Elysia()\r\n  .use(authentication)\r\n  // @ts-ignore\r\n  .get('/metrics/month-orders-amount', async ({ getManagedRestaurantId }) => {\r\n    const restaurantId = await getManagedRestaurantId()\r\n\r\n    const today = dayjs()\r\n    const lastMonth = today.subtract(1, 'month')\r\n    const startOfLastMonth = lastMonth.startOf('month')\r\n\r\n    /**\r\n     * January is ZERO, that's why we need to sum 1 to get the actual month\r\n     */\r\n    const lastMonthWithYear = lastMonth.format('YYYY-MM')\r\n    const currentMonthWithYear = today.format('YYYY-MM')\r\n\r\n    const ordersPerMonth = await db\r\n      .select({\r\n        monthWithYear: sql<string>`TO_CHAR(${orders.createdAt}, 'YYYY-MM')`,\r\n        amount: count(orders.id),\r\n      })\r\n      .from(orders)\r\n      .where(\r\n        and(\r\n          eq(orders.restaurantId, restaurantId),\r\n          gte(orders.createdAt, startOfLastMonth.toDate()),\r\n        ),\r\n      )\r\n      .groupBy(sql`TO_CHAR(${orders.createdAt}, 'YYYY-MM')`)\r\n      .having(({ amount }) => gte(amount, 1))\r\n\r\n    const currentMonthOrdersAmount = ordersPerMonth.find((ordersInMonth) => {\r\n      return ordersInMonth.monthWithYear === currentMonthWithYear\r\n    })\r\n\r\n    const lastMonthOrdersAmount = ordersPerMonth.find((ordersInMonth) => {\r\n      return ordersInMonth.monthWithYear === lastMonthWithYear\r\n    })\r\n\r\n    const diffFromLastMonth =\r\n      lastMonthOrdersAmount && currentMonthOrdersAmount\r\n        ? (currentMonthOrdersAmount.amount * 100) / lastMonthOrdersAmount.amount\r\n        : null\r\n\r\n    return {\r\n      amount: currentMonthOrdersAmount?.amount ?? 0,\r\n      diffFromLastMonth: diffFromLastMonth\r\n        ? Number((diffFromLastMonth - 100).toFixed(2))\r\n        : 0,\r\n    }\r\n  })\r\n","import Elysia from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { and, count, eq, gte, sql } from 'drizzle-orm'\r\nimport dayjs from 'dayjs'\r\nimport { db } from '@/db/connection'\r\nimport { orders } from '@/db/schema'\r\n\r\nexport const getDayOrdersAmount = new Elysia()\r\n  .use(authentication)\r\n  // @ts-ignore\r\n  .get('/metrics/day-orders-amount', async ({ getManagedRestaurantId }) => {\r\n    const restaurantId = await getManagedRestaurantId()\r\n\r\n    const today = dayjs()\r\n    const yesterday = today.subtract(1, 'day')\r\n    const startOfYesterday = yesterday.startOf('day')\r\n\r\n    /**\r\n     * January is ZERO, that's why we need to sum 1 to get the actual month\r\n     */\r\n    const yesterdayWithMonthAndYear = yesterday.format('YYYY-MM-DD')\r\n    const todayWithMonthAndYear = today.format('YYYY-MM-DD')\r\n\r\n    const ordersPerDay = await db\r\n      .select({\r\n        dayWithMonthAndYear: sql<string>`TO_CHAR(${orders.createdAt}, 'YYYY-MM-DD')`,\r\n        amount: count(orders.id),\r\n      })\r\n      .from(orders)\r\n      .where(\r\n        and(\r\n          eq(orders.restaurantId, restaurantId),\r\n          gte(orders.createdAt, startOfYesterday.toDate()),\r\n        ),\r\n      )\r\n      .groupBy(sql`TO_CHAR(${orders.createdAt}, 'YYYY-MM-DD')`)\r\n      .having(({ amount }) => gte(amount, 1))\r\n\r\n    const todayOrdersAmount = ordersPerDay.find((orderInDay) => {\r\n      return orderInDay.dayWithMonthAndYear === todayWithMonthAndYear\r\n    })\r\n\r\n    const yesterdayOrdersAmount = ordersPerDay.find((orderInDay) => {\r\n      return orderInDay.dayWithMonthAndYear === yesterdayWithMonthAndYear\r\n    })\r\n\r\n    const diffFromYesterday =\r\n      yesterdayOrdersAmount && todayOrdersAmount\r\n        ? (todayOrdersAmount.amount * 100) / yesterdayOrdersAmount.amount\r\n        : null\r\n\r\n    return {\r\n      amount: todayOrdersAmount?.amount ?? 0,\r\n      diffFromYesterday: diffFromYesterday\r\n        ? Number((diffFromYesterday - 100).toFixed(2))\r\n        : 0,\r\n    }\r\n  })\r\n","import Elysia from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { and, count, eq, gte, sql } from 'drizzle-orm'\r\nimport dayjs from 'dayjs'\r\nimport { db } from '@/db/connection'\r\nimport { orders } from '@/db/schema'\r\n\r\nexport const getMonthCanceledOrdersAmount = new Elysia()\r\n  .use(authentication)\r\n  .get(\r\n    '/metrics/month-canceled-orders-amount',\r\n    // @ts-ignore\r\n    async ({ getManagedRestaurantId }) => {\r\n      const restaurantId = await getManagedRestaurantId()\r\n\r\n      const today = dayjs()\r\n      const lastMonth = today.subtract(1, 'month')\r\n      const startOfLastMonth = lastMonth.startOf('month')\r\n\r\n      /**\r\n       * January is ZERO, that's why we need to sum 1 to get the actual month\r\n       */\r\n      const lastMonthWithYear = lastMonth.format('YYYY-MM')\r\n      const currentMonthWithYear = today.format('YYYY-MM')\r\n\r\n      const ordersPerMonth = await db\r\n        .select({\r\n          monthWithYear: sql<string>`TO_CHAR(${orders.createdAt}, 'YYYY-MM')`,\r\n          amount: count(orders.id),\r\n        })\r\n        .from(orders)\r\n        .where(\r\n          and(\r\n            eq(orders.restaurantId, restaurantId),\r\n            eq(orders.status, 'canceled'),\r\n            gte(orders.createdAt, startOfLastMonth.toDate()),\r\n          ),\r\n        )\r\n        .groupBy(sql`TO_CHAR(${orders.createdAt}, 'YYYY-MM')`)\r\n        .having(({ amount }) => gte(amount, 1))\r\n\r\n      const currentMonthOrdersAmount = ordersPerMonth.find((ordersInMonth) => {\r\n        return ordersInMonth.monthWithYear === currentMonthWithYear\r\n      })\r\n\r\n      const lastMonthOrdersAmount = ordersPerMonth.find((ordersInMonth) => {\r\n        return ordersInMonth.monthWithYear === lastMonthWithYear\r\n      })\r\n\r\n      const diffFromLastMonth =\r\n        lastMonthOrdersAmount && currentMonthOrdersAmount\r\n          ? (currentMonthOrdersAmount.amount * 100) /\r\n          lastMonthOrdersAmount.amount\r\n          : null\r\n\r\n      return {\r\n        amount: currentMonthOrdersAmount?.amount ?? 0,\r\n        diffFromLastMonth: diffFromLastMonth\r\n          ? Number((diffFromLastMonth - 100).toFixed(2))\r\n          : 0,\r\n      }\r\n    },\r\n  )\r\n","import Elysia, { t } from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { and, count, eq, gte, lte, sql, sum } from 'drizzle-orm'\r\nimport dayjs from 'dayjs'\r\nimport { db } from '@/db/connection'\r\nimport { orders } from '@/db/schema'\r\n\r\nexport const getDailyReceiptInPeriod = new Elysia().use(authentication).get(\r\n  '/metrics/daily-receipt-in-period',\r\n  // @ts-ignore\r\n  async ({ getManagedRestaurantId, query, set }) => {\r\n    const restaurantId = await getManagedRestaurantId()\r\n\r\n    const { from, to } = query\r\n\r\n    const startDate = from ? dayjs(from) : dayjs().subtract(7, 'd')\r\n    const endDate = to ? dayjs(to) : from ? startDate.add(7, 'days') : dayjs()\r\n\r\n    if (endDate.diff(startDate, 'days') > 7) {\r\n      set.status = 400\r\n\r\n      return {\r\n        code: 'INVALID_PERIOD',\r\n        message: 'O intervalo das datas não pode ser superior a 7 dias.',\r\n      }\r\n    }\r\n\r\n    const receiptPerDay = await db\r\n      .select({\r\n        date: sql<string>`TO_CHAR(${orders.createdAt}, 'DD/MM')`,\r\n        receipt: sum(orders.totalInCents).mapWith(Number),\r\n      })\r\n      .from(orders)\r\n      .where(\r\n        and(\r\n          eq(orders.restaurantId, restaurantId),\r\n          gte(\r\n            orders.createdAt,\r\n            startDate\r\n              .startOf('day')\r\n              .add(startDate.utcOffset(), 'minutes')\r\n              .toDate(),\r\n          ),\r\n          lte(\r\n            orders.createdAt,\r\n            endDate.endOf('day').add(endDate.utcOffset(), 'minutes').toDate(),\r\n          ),\r\n        ),\r\n      )\r\n      .groupBy(sql`TO_CHAR(${orders.createdAt}, 'DD/MM')`)\r\n      .having(({ receipt }) => gte(receipt, 1))\r\n\r\n    const orderedReceiptPerDay = receiptPerDay.sort((a, b) => {\r\n      const [dayA, monthA] = a.date.split('/').map(Number)\r\n      const [dayB, monthB] = b.date.split('/').map(Number)\r\n\r\n      if (monthA === monthB) {\r\n        return dayA - dayB\r\n      } else {\r\n        const dateA = new Date(2023, monthA - 1)\r\n        const dateB = new Date(2023, monthB - 1)\r\n\r\n        return dateA.getTime() - dateB.getTime()\r\n      }\r\n    })\r\n\r\n    return orderedReceiptPerDay\r\n  },\r\n  {\r\n    query: t.Object({\r\n      from: t.Optional(t.String()),\r\n      to: t.Optional(t.String()),\r\n    }),\r\n  },\r\n)\r\n","import Elysia from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { and, count, eq } from 'drizzle-orm'\r\nimport { db } from '@/db/connection'\r\nimport { orderItems, orders, products } from '@/db/schema'\r\n\r\nexport const getPopularProducts = new Elysia()\r\n  .use(authentication)\r\n  // @ts-ignore\r\n  .get('/metrics/popular-products', async ({ getManagedRestaurantId }) => {\r\n    const restaurantId = await getManagedRestaurantId()\r\n\r\n    try {\r\n      const popularProducts = await db\r\n        .select({\r\n          product: products.name,\r\n          amount: count(orderItems.id),\r\n        })\r\n        .from(orderItems)\r\n        .leftJoin(orders, eq(orders.id, orderItems.orderId))\r\n        .leftJoin(products, eq(products.id, orderItems.productId))\r\n        .where(and(eq(orders.restaurantId, restaurantId)))\r\n        .groupBy(products.name)\r\n        .limit(5)\r\n\r\n      return popularProducts\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  })\r\n","import Elysia, { t } from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { db } from '@/db/connection'\r\nimport { orders } from '@/db/schema'\r\nimport { eq } from 'drizzle-orm'\r\nimport { UnauthorizedError } from './errors/unauthorized-error'\r\n\r\nexport const dispatchOrder = new Elysia().use(authentication).patch(\r\n  '/orders/:id/dispatch',\r\n  // @ts-ignore\r\n  async ({ getManagedRestaurantId, set, params }) => {\r\n    const { id: orderId } = params\r\n    const restaurantId = await getManagedRestaurantId()\r\n\r\n    const order = await db.query.orders.findFirst({\r\n      where(fields, { eq, and }) {\r\n        return and(\r\n          eq(fields.id, orderId),\r\n          eq(fields.restaurantId, restaurantId),\r\n        )\r\n      },\r\n    })\r\n\r\n    if (!order) {\r\n      throw new UnauthorizedError()\r\n    }\r\n\r\n    if (order.status !== 'processing') {\r\n      set.status = 400\r\n\r\n      return { message: 'O pedido já foi enviado ao cliente.' }\r\n    }\r\n\r\n    await db\r\n      .update(orders)\r\n      .set({\r\n        status: 'delivering',\r\n      })\r\n      .where(eq(orders.id, orderId))\r\n\r\n    set.status = 204\r\n  },\r\n  {\r\n    params: t.Object({\r\n      id: t.String(),\r\n    }),\r\n  },\r\n)\r\n","import Elysia, { t } from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { db } from '@/db/connection'\r\nimport { orders } from '@/db/schema'\r\nimport { eq } from 'drizzle-orm'\r\nimport { UnauthorizedError } from './errors/unauthorized-error'\r\n\r\nexport const deliverOrder = new Elysia().use(authentication).patch(\r\n  '/orders/:id/deliver',\r\n      // @ts-ignore\r\n  async ({ getManagedRestaurantId, set, params }) => {\r\n    const { id: orderId } = params\r\n    const restaurantId = await getManagedRestaurantId()\r\n\r\n    const order = await db.query.orders.findFirst({\r\n      where(fields, { eq, and }) {\r\n        return and(\r\n          eq(fields.id, orderId),\r\n          eq(fields.restaurantId, restaurantId),\r\n        )\r\n      },\r\n    })\r\n\r\n    if (!order) {\r\n      throw new UnauthorizedError()\r\n    }\r\n\r\n    if (order.status !== 'delivering') {\r\n      set.status = 400\r\n\r\n      return { message: 'O pedido já foi entregue.' }\r\n    }\r\n\r\n    await db\r\n      .update(orders)\r\n      .set({\r\n        status: 'delivered',\r\n      })\r\n      .where(eq(orders.id, orderId))\r\n\r\n    set.status = 204\r\n  },\r\n  {\r\n    params: t.Object({\r\n      id: t.String(),\r\n    }),\r\n  },\r\n)\r\n","import Elysia from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { and, count, eq } from 'drizzle-orm'\r\nimport { db } from '@/db/connection'\r\nimport { orderItems, orders, products } from '@/db/schema'\r\n\r\nexport const getProducts = new Elysia()\r\n  .use(authentication)\r\n  // @ts-ignore\r\n  .get('/get-products', async ({ getManagedRestaurantId }) => {\r\n    const restaurantId = await getManagedRestaurantId()\r\n\r\n    try {\r\n      const product = await db\r\n        .select({\r\n          id: products.id,\r\n          name: products.name,\r\n          category: products.category,\r\n          price: products.priceInCents,\r\n        })\r\n        .from(orderItems)\r\n        .leftJoin(orders, eq(orders.id, orderItems.orderId))\r\n        .leftJoin(products, eq(products.id, orderItems.productId))\r\n        .where(and(eq(orders.restaurantId, restaurantId)))\r\n        .groupBy(products.name, products.id)\r\n\r\n      return product\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  })\r\n","import Elysia from 'elysia'\r\nimport { authentication } from '../authentication'\r\nimport { and, count, eq } from 'drizzle-orm'\r\nimport { db } from '@/db/connection'\r\nimport { orderItems, orders, users } from '@/db/schema'\r\n\r\nexport const getCustomers = new Elysia()\r\n  .use(authentication)\r\n  // @ts-ignore\r\n  .get('/get-customers', async ({ getManagedRestaurantId }) => {\r\n    const restaurantId = await getManagedRestaurantId()\r\n    const role = 'customer'\r\n\r\n    try {\r\n      const customer = await db\r\n        .select({\r\n          id: users.name,\r\n          name: users.name,\r\n          phone: users.phone\r\n        })\r\n        .from(users)\r\n        .where(and(eq(users.role, role)))\r\n\r\n      return customer\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  })\r\n"],"mappings":"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","names":["import_elysia","import_drizzle_orm","import_pg_core","import_pg_core","import_drizzle_orm","import_nanoid","import_nanoid","import_pg_core","import_drizzle_orm","import_nanoid","import_drizzle_orm","import_pg_core","import_nanoid","import_nanoid","import_pg_core","import_pg_core","import_drizzle_orm","import_nanoid","postgres","Elysia","import_elysia","import_zod","Elysia","import_elysia","import_nanoid","Elysia","eq","import_elysia","import_elysia","Elysia","jwt","cookie","Stripe","Elysia","products","eq","and","inArray","users","import_elysia","import_drizzle_orm","Elysia","eq","and","import_elysia","import_drizzle_orm","Elysia","eq","and","import_elysia","import_drizzle_orm","Elysia","import_elysia","Elysia","import_elysia","import_zod","Elysia","evaluations","desc","import_elysia","import_drizzle_orm","Elysia","import_elysia","import_drizzle_orm","Elysia","import_elysia","Elysia","eq","import_elysia","import_drizzle_orm","Elysia","eq","dayjs","import_elysia","Elysia","eq","import_elysia","Elysia","signOut","import_elysia","Elysia","eq","and","import_elysia","import_drizzle_orm","import_dayjs","Elysia","dayjs","import_elysia","import_drizzle_orm","import_dayjs","Elysia","dayjs","import_elysia","import_drizzle_orm","import_dayjs","Elysia","dayjs","import_elysia","import_drizzle_orm","import_dayjs","Elysia","dayjs","import_elysia","import_drizzle_orm","import_dayjs","Elysia","dayjs","import_elysia","import_drizzle_orm","Elysia","import_elysia","import_drizzle_orm","Elysia","eq","and","import_elysia","import_drizzle_orm","Elysia","eq","and","import_elysia","import_drizzle_orm","Elysia","import_elysia","import_drizzle_orm","Elysia"]}